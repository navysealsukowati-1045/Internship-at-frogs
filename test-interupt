#include <Arduino.h>

QueueHandle_t xQueue = NULL;

// ISR tombol
void IRAM_ATTR isrHandler() {
  uint32_t timestamp = millis();

  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
  xQueueSendFromISR(xQueue, &timestamp, &xHigherPriorityTaskWoken);

  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
}

// Task untuk blink LED
void vTaskBlink(void *pvParameters) {
  pinMode(LED_BUILTIN, OUTPUT);

  for (;;) {
    digitalWrite(LED_BUILTIN, !digitalRead(LED_BUILTIN));
    vTaskDelay(500 / portTICK_PERIOD_MS);  // delay 500 ms
  }
}

// Task untuk handle interrupt
void vTaskHandler(void *pvParameters) {
  uint32_t receivedData;

  for (;;) {
    if (xQueueReceive(xQueue, &receivedData, portMAX_DELAY) == pdTRUE) {
      Serial.print("Interrupt ditangani, timestamp: ");
      Serial.println(receivedData);
    }
  }
}

void setup() {
  Serial.begin(115200);

  // Buat queue dengan kapasitas 10 elemen
  xQueue = xQueueCreate(10, sizeof(uint32_t));
  if (xQueue == NULL) {
    Serial.println("Gagal buat queue!");
    while (1);
  }

  // Pasang ISR pada GPIO 0 (misalnya tombol ditekan ke GND)
  pinMode(0, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(0), isrHandler, FALLING);

  // Task blink LED (indikator scheduler normal)
  xTaskCreatePinnedToCore(
    vTaskBlink,
    "TaskBlink",
    2048,
    NULL,
    1,
    NULL,
    1
  );

  // Task handler interrupt
  xTaskCreatePinnedToCore(
    vTaskHandler,
    "TaskHandler",
    4096,
    NULL,
    2,
    NULL,
    1
  );
}

void loop() {
  // kosong, semua kerja ada di task
}
